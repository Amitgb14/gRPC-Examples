// Code generated by protoc-gen-go. DO NOT EDIT.
// source: heartbeat.proto

/*
Package monitoring is a generated protocol buffer package.

It is generated from these files:
	heartbeat.proto

It has these top-level messages:
	HeartRequest
	HeartResponse
*/
package monitoring

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HeartRequest struct {
	Service string `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *HeartRequest) Reset()                    { *m = HeartRequest{} }
func (m *HeartRequest) String() string            { return proto.CompactTextString(m) }
func (*HeartRequest) ProtoMessage()               {}
func (*HeartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HeartRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

type HeartResponse struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *HeartResponse) Reset()                    { *m = HeartResponse{} }
func (m *HeartResponse) String() string            { return proto.CompactTextString(m) }
func (*HeartResponse) ProtoMessage()               {}
func (*HeartResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HeartResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*HeartRequest)(nil), "monitoring.HeartRequest")
	proto.RegisterType((*HeartResponse)(nil), "monitoring.HeartResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Metrics service

type MetricsClient interface {
	HeartStatus(ctx context.Context, in *HeartRequest, opts ...grpc.CallOption) (*HeartResponse, error)
}

type metricsClient struct {
	cc *grpc.ClientConn
}

func NewMetricsClient(cc *grpc.ClientConn) MetricsClient {
	return &metricsClient{cc}
}

func (c *metricsClient) HeartStatus(ctx context.Context, in *HeartRequest, opts ...grpc.CallOption) (*HeartResponse, error) {
	out := new(HeartResponse)
	err := grpc.Invoke(ctx, "/monitoring.Metrics/HeartStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Metrics service

type MetricsServer interface {
	HeartStatus(context.Context, *HeartRequest) (*HeartResponse, error)
}

func RegisterMetricsServer(s *grpc.Server, srv MetricsServer) {
	s.RegisterService(&_Metrics_serviceDesc, srv)
}

func _Metrics_HeartStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).HeartStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.Metrics/HeartStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).HeartStatus(ctx, req.(*HeartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Metrics_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monitoring.Metrics",
	HandlerType: (*MetricsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartStatus",
			Handler:    _Metrics_HeartStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heartbeat.proto",
}

func init() { proto.RegisterFile("heartbeat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x48, 0x4d, 0x2c,
	0x2a, 0x49, 0x4a, 0x4d, 0x2c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xca, 0xcd, 0xcf,
	0xcb, 0x2c, 0xc9, 0x2f, 0xca, 0xcc, 0x4b, 0x57, 0xd2, 0xe0, 0xe2, 0xf1, 0x00, 0x49, 0x07, 0xa5,
	0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x49, 0x70, 0xb1, 0x17, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7,
	0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xb8, 0x4a, 0xea, 0x5c, 0xbc, 0x50, 0x95, 0xc5,
	0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x62, 0x5c, 0x6c, 0xc5, 0x25, 0x89, 0x25, 0xa5, 0xc5, 0x50,
	0x95, 0x50, 0x9e, 0x91, 0x3f, 0x17, 0xbb, 0x6f, 0x6a, 0x49, 0x51, 0x66, 0x72, 0xb1, 0x90, 0x0b,
	0x17, 0x37, 0x58, 0x4f, 0x30, 0x58, 0x46, 0x48, 0x42, 0x0f, 0x61, 0xb3, 0x1e, 0xb2, 0xb5, 0x52,
	0x92, 0x58, 0x64, 0x20, 0xd6, 0x28, 0x31, 0x24, 0xb1, 0x81, 0x9d, 0x6d, 0x0c, 0x08, 0x00, 0x00,
	0xff, 0xff, 0x4d, 0x00, 0x0e, 0x8f, 0xc9, 0x00, 0x00, 0x00,
}
